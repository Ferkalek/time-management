{"version":3,"sources":["context.ts","components/ActiveTasks/ActiveTasksItem.tsx","components/ActiveTasks/ActiveTasks.tsx","components/TasksList/TasksListItem.tsx","components/TasksList/TasksList.tsx","components/CreateTask.tsx","components/EditTask.tsx","components/Report.tsx","components/Confirmation.tsx","components/Modal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ApplicationService","React","createContext","ActiveTasksItem","observer","task","state","useContext","Context","classes","isRunning","push","className","title","onClick","editTask","viewBox","fill","d","fillRule","clipRule","showConfirmationModal","join","startedTask","bind","id","pausedTask","isStopped","stopedTask","description","ActiveTasks","isRunningTask","arePausedTasks","length","map","key","TasksListItem","classesDecorTask","classesCompletedTask","isCompleted","TasksList","tasks","CreateTask","useState","isError","setIsError","inputRef","useRef","textAreaRef","classesOfInput","clearControls","useCallback","current","value","onCreateTask","trim","newTask","Date","timeStart","duration","createTask","onCreateTaskAndActivate","date","createTaskAndActivate","htmlFor","ref","type","placeholder","EditTask","inputVal","setInputValue","textareaVal","setTextareaValue","useEffect","selectedTask","changeInputHandler","event","target","changeTextareaHandler","onUpdateTask","updateTask","onChange","Report","getTotalTime","totalTime","tasksWithTime","forEach","t","getTimeAsSecondsFromTask","getTimeAsString","getSpendTime","Confirmation","closeHandler","deleteTask","Modal","titleOfModal","kindOfModal","clickHandler","e","currentTarget","App","useLocalStore","filter","find","appendTask","prependTask","unshift","showCreateTaskModal","showReportModal","replaceRunningTask","runningTask","toast","info","inxTask","findIndex","splice","taskDuration","Math","round","secondsTime","spandTimeStr","hours","floor","minutes","savedTasks","JSON","parse","localStorage","getItem","reaction","stringify","json","setItem","delay","useApplicationService","Provider","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65e96d3f.chunk.js","sourcesContent":["import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useLocalStore } from \"mobx-react\";\nimport { reaction } from \"mobx\";\nimport { ITask } from \"./interfaces\";\n\nconst ApplicationService = React.createContext<\n  ReturnType<typeof useApplicationService>\n>(null as any);\n\nexport const useApplicationService = () => {\n  const state = useLocalStore(() => ({\n    tasks: [] as ITask[],\n    kindOfModal: \"\",\n    selectedTask: {} as ITask,\n    get tasksWithTime() {\n      return state.tasks.filter((t) => t.timeStart !== 0 || t.duration !== 0);\n    },\n    get isRunningTask() {\n      return state.tasks.find((t) => t.isRunning === true);\n    },\n    get arePausedTasks() {\n      return state.tasks.filter((t) => t.isStopped === true);\n    },\n    appendTask: (task: ITask): void => {\n      state.tasks.push(task);\n    },\n    prependTask: (task: ITask): void => {\n      state.tasks.unshift(task);\n    },\n    showCreateTaskModal(): void {\n      state.kindOfModal = \"create\";\n    },\n    showReportModal(): void {\n      state.kindOfModal = \"report\";\n    },\n    closeHandler(): void {\n      state.kindOfModal = \"\";\n    },\n    createTask(task: ITask): void {\n      state.appendTask(task);\n      state.closeHandler();\n    },\n    replaceRunningTask: (task: ITask): void => {\n      task.isRunning = false;\n      task.isStopped = true;\n      task.duration =\n        task.duration > 0\n          ? +new Date() - task.timeStart + task.duration\n          : +new Date() - task.timeStart;\n      task.timeStart = 0;\n    },\n    createTaskAndActivate(task: ITask): void {\n      const runningTask = state.tasks.find((task) => task.isRunning === true);\n      if (runningTask) {\n        toast.info(\n          \"You have a task that is running yet, so a new task will replace the task is running!\"\n        );\n\n        state.replaceRunningTask(runningTask);\n      }\n\n      state.appendTask(task);\n      state.closeHandler();\n    },\n    updateTask(task: ITask): void {\n      const inxTask = state.tasks.findIndex((t) => t.id === task.id);\n      state.tasks.splice(inxTask, 1, task);\n      state.closeHandler();\n    },\n    startedTask(id: number): void {\n      const runningTask = state.tasks.find((task) => task.isRunning === true);\n      if (runningTask) {\n        toast.info(\n          \"You have a task that is running yet, so a new task will replace the task is running!\"\n        );\n\n        state.replaceRunningTask(runningTask);\n      }\n\n      const task = state.tasks.find((t) => t.id === id);\n      if (task) {\n        task.isRunning = true;\n        task.isStopped = false;\n        task.isCompleted = false;\n        task.timeStart = +new Date();\n      }\n    },\n    pausedTask(id: number): void {\n      const task = state.tasks.find((t) => t.id === id);\n      if (task) {\n        task.isRunning = false;\n        task.isStopped = true;\n        task.isCompleted = false;\n        task.duration = task.duration + +new Date() - task.timeStart;\n        task.timeStart = 0;\n      }\n    },\n    stopedTask(id: number): void {\n      const task = state.tasks.find((t) => t.id === id);\n      if (task) {\n        task.isRunning = false;\n        task.isStopped = false;\n        task.isCompleted = true;\n        task.duration =\n          task.timeStart > 0\n            ? task.duration + +new Date() - task.timeStart\n            : task.duration;\n        task.timeStart = 0;\n      }\n    },\n    editTask: (task: ITask): void => {\n      state.selectedTask = task;\n      state.kindOfModal = \"edit\";\n    },\n    showConfirmationModal: (task: ITask): void => {\n      state.kindOfModal = \"confirmation\";\n      state.selectedTask = task;\n    },\n    deleteTask: (id: number): void => {\n      const inxTask = state.tasks.findIndex((t) => t.id === id);\n      state.tasks.splice(inxTask, 1);\n      state.closeHandler();\n    },\n    getTimeAsSecondsFromTask: (task: ITask): number => {\n      const taskDuration =\n        task.timeStart > 0\n          ? +new Date() - task.timeStart + task.duration\n          : task.duration;\n      return Math.round(taskDuration / 1000);\n    },\n    getTimeAsString: (secondsTime: number): string => {\n      let spandTimeStr = \"\";\n\n      if (secondsTime / 3600 >= 1) {\n        const hours = Math.floor(secondsTime / 3600);\n        spandTimeStr += `${hours}h`;\n        secondsTime = secondsTime % 3600;\n      }\n\n      if (secondsTime / 60 >= 1) {\n        const minutes = Math.floor(secondsTime / 60);\n        spandTimeStr += ` ${minutes}m`;\n        secondsTime = secondsTime % 60;\n      }\n      spandTimeStr += ` ${secondsTime}s`;\n\n      return spandTimeStr;\n    },\n    getSpendTime: (task: ITask): string => {\n      let secondsTime = state.getTimeAsSecondsFromTask(task);\n      return state.getTimeAsString(secondsTime);\n    },\n  }));\n\n  React.useEffect(() => {\n    const savedTasks = JSON.parse(localStorage.getItem(\"tasks\") || \"[]\");\n    state.tasks.splice(0, state.tasks.length, ...savedTasks);\n  }, [state]);\n\n  reaction(\n    () => JSON.stringify(state.tasks),\n    (json) => {\n      localStorage.setItem(\"tasks\", json);\n    },\n    {\n      delay: 500,\n    }\n  );\n\n  return state;\n};\n\nexport default ApplicationService;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Context from \"../../context\";\nimport { ITask } from \"../../interfaces\";\n\nexport const ActiveTasksItem: React.FC<{ task: ITask }> = observer(\n  ({ task }) => {\n    const state = useContext(Context);\n    const classes = [\"progress-bar bg-blue-500\"];\n\n    if (task.isRunning) {\n      classes.push(\"h-full\");\n    }\n    return (\n      <div className=\"text-gray-700 bg-white rounded shadow-sm hover:shadow-md mb-2 py-2 px-4 transition ease-in-out duration-300\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <h3 className=\"text-xs uppercase font-bold\">{task.title}</h3>\n\n          <div className=\"flex justify-end pt-1 flex-no-wrap\">\n            <button\n              className=\"ml-1 duration-300 ease-in-out hover:text-gray-900 transition\"\n              onClick={() => state.editTask(task)}\n            >\n              <svg\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                className=\"pencil-alt w-5 h-5\"\n              >\n                <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\"></path>\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\"\n                  clipRule=\"evenodd\"\n                ></path>\n              </svg>\n            </button>\n            <button\n              className=\"ml-1 duration-300 ease-in-out hover:text-gray-900 transition\"\n              onClick={() => state.showConfirmationModal(task)}\n            >\n              <svg\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                className=\"trash w-5 h-5\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                  clipRule=\"evenodd\"\n                ></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex-1 progress border border-gray-400 bg-gray-300 h-2 overflow-hidden rounded\">\n            <div className={classes.join(\" \")}></div>\n          </div>\n          <div className=\"flex\">\n            {/* play */}\n            {!task.isRunning && (\n              <button\n                className=\"ml-1\"\n                onClick={state.startedTask.bind(null, task.id)}\n              >\n                <svg\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                  className=\"play w-5 h-5\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\"\n                    clipRule=\"evenodd\"\n                  ></path>\n                </svg>\n              </button>\n            )}\n\n            {/* pausa */}\n            {task.isRunning && (\n              <button\n                className=\"ml-1\"\n                onClick={state.pausedTask.bind(null, task.id)}\n              >\n                <svg\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                  className=\"pause w-5 h-5\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                    clipRule=\"evenodd\"\n                  ></path>\n                </svg>\n              </button>\n            )}\n\n            {/* stop */}\n            {(task.isRunning || task.isStopped) && (\n              <button\n                className=\"ml-1\"\n                onClick={state.stopedTask.bind(null, task.id)}\n              >\n                <svg\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                  className=\"stop w-5 h-5\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z\"\n                    clipRule=\"evenodd\"\n                  ></path>\n                </svg>\n              </button>\n            )}\n          </div>\n        </div>\n        <p className=\"text-xs\">{task.description}</p>\n      </div>\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { ActiveTasksItem } from \"./ActiveTasksItem\";\nimport Context from \"../../context\";\n\nexport const ActiveTasks: React.FC = observer(() => {\n  const state = useContext(Context);\n\n  return (\n    <div>\n      <h2 className=\"font-bold mb-4 text-gray-800 text-xl uppercase\">\n        Active tasks\n      </h2>\n\n      {!state.isRunningTask && !state.arePausedTasks.length && (\n        <p className=\"text-gray-500 text-sm -mt-4\">\n          You do not have any active task.\n        </p>\n      )}\n\n      {state.isRunningTask && <ActiveTasksItem task={state.isRunningTask} />}\n\n      {state.arePausedTasks &&\n        state.arePausedTasks.map((task) => (\n          <ActiveTasksItem key={task.id} task={task} />\n        ))}\n    </div>\n  );\n});\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { ITask } from \"../../interfaces\";\nimport Context from \"../../context\";\n\nexport const TasksListItem: React.FC<{ task: ITask }> = observer(({ task }) => {\n  const state = useContext(Context);\n  const classesDecorTask = [\"absolute bottom-0 left-0 top-0 w-1\"];\n  const classesCompletedTask = [\"text-xs\"];\n\n  if (task.isRunning) {\n    classesDecorTask.push(\"bg-teal-500\");\n  } else if (task.isStopped) {\n    classesDecorTask.push(\"bg-gray-500\");\n  } else if (task.isCompleted) {\n    classesDecorTask.push(\"bg-black\");\n    classesCompletedTask.push(\"line-through\");\n  } else {\n    classesDecorTask.push(\"bg-orange-500\");\n  }\n  return (\n    <div className=\"relative overflow-hidden text-gray-700 bg-white mb-2 py-2 px-4 rounded shadow-sm hover:shadow-md transition ease-in-out duration-300\">\n      <div className={classesDecorTask.join(\" \")}></div>\n\n      <div className=\"flex justify-between items-start mb-2\">\n        <h3 className=\"text-xs uppercase font-bold\">{task.title}</h3>\n\n        <div className=\"flex justify-end pt-1 flex-no-wrap\">\n          {/* play */}\n          {!task.isRunning && (\n            <button\n              className=\"ml-1\"\n              onClick={state.startedTask.bind(null, task.id)}\n            >\n              {task.isCompleted ? (\n                <svg\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                  className=\"refresh w-5 h-5\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\"\n                    clipRule=\"evenodd\"\n                  ></path>\n                </svg>\n              ) : (\n                <svg\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                  className=\"play w-5 h-5\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\"\n                    clipRule=\"evenodd\"\n                  ></path>\n                </svg>\n              )}\n            </button>\n          )}\n\n          {/* pausa */}\n          {task.isRunning && (\n            <button\n              className=\"ml-1\"\n              onClick={state.pausedTask.bind(null, task.id)}\n            >\n              <svg\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                className=\"pause w-5 h-5\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                  clipRule=\"evenodd\"\n                ></path>\n              </svg>\n            </button>\n          )}\n\n          {/* stop */}\n          {(task.isRunning || task.isStopped) && (\n            <button\n              className=\"ml-1\"\n              onClick={state.stopedTask.bind(null, task.id)}\n            >\n              <svg\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                className=\"stop w-5 h-5\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z\"\n                  clipRule=\"evenodd\"\n                ></path>\n              </svg>\n            </button>\n          )}\n\n          <button\n            className=\"ml-1 duration-300 ease-in-out hover:text-gray-900 transition\"\n            onClick={() => state.editTask(task)}\n          >\n            <svg\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              className=\"pencil-alt w-5 h-5\"\n            >\n              <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\"></path>\n              <path\n                fillRule=\"evenodd\"\n                d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\"\n                clipRule=\"evenodd\"\n              ></path>\n            </svg>\n          </button>\n          <button\n            className=\"ml-1 duration-300 ease-in-out hover:text-gray-900 transition\"\n            onClick={() => state.showConfirmationModal(task)}\n          >\n            <svg\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              className=\"trash w-5 h-5\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                clipRule=\"evenodd\"\n              ></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <p className={classesCompletedTask.join(\" \")}>{task.description}</p>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { TasksListItem } from \"./TasksListItem\";\nimport Context from \"../../context\";\n\nexport const TasksList: React.FC = observer(() => {\n  const state = React.useContext(Context);\n  return (\n    <div>\n      <h2 className=\"font-bold mb-4 mt-8 text-gray-800 text-xl uppercase\">\n        All tasks\n      </h2>\n      {state.tasks.length ? (\n        state.tasks.map((task) => <TasksListItem key={task.id} task={task} />)\n      ) : (\n        <p className=\"text-gray-500 text-sm -mt-4\">You do not have any task.</p>\n      )}\n    </div>\n  );\n});\n","import React, { useContext, useRef, useState, useCallback } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Context from \"../context\";\n\nexport const CreateTask: React.FC = observer(() => {\n  const [isError, setIsError] = useState<boolean>(false);\n  const state = useContext(Context);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const classesOfInput = [\n    \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n  ];\n\n  if (isError) {\n    classesOfInput.push(\"border-red-500\");\n  }\n\n  const clearControls = useCallback(() => {\n    inputRef.current!.value = \"\";\n    textAreaRef.current!.value = \"\";\n  }, []);\n\n  const onCreateTask = useCallback(() => {\n    if (inputRef.current!.value.trim()) {\n      const newTask = {\n        id: +new Date(),\n        title: inputRef.current!.value,\n        description: textAreaRef.current!.value,\n        isRunning: false,\n        isStopped: false,\n        isCompleted: false,\n        timeStart: 0,\n        duration: 0,\n      };\n      state.createTask(newTask);\n      clearControls();\n    } else {\n      setIsError(true);\n    }\n  }, [clearControls, state]);\n\n  const onCreateTaskAndActivate = useCallback(() => {\n    if (inputRef.current!.value.trim()) {\n      const date = +new Date();\n      const newTask = {\n        id: date,\n        title: inputRef.current!.value,\n        description: textAreaRef.current!.value,\n        isRunning: true,\n        isStopped: false,\n        isCompleted: false,\n        timeStart: date,\n        duration: 0,\n      };\n      state.createTaskAndActivate(newTask);\n      clearControls();\n    } else {\n      setIsError(true);\n    }\n  }, [clearControls, state]);\n\n  return (\n    <>\n      <div className=\"mb-6 relative\">\n        <label\n          className=\"mb-1 block font-bold text-gray-700 text-sm uppercase\"\n          htmlFor=\"title\"\n        >\n          Title\n        </label>\n        <input\n          className={classesOfInput.join(\" \")}\n          ref={inputRef}\n          id=\"title\"\n          type=\"text\"\n          placeholder=\"Title\"\n        />\n        {isError && (\n          <p className=\"-mb-5 absolute bottom-0 italic left-0 text-red-500 text-xs\">\n            This field is required.\n          </p>\n        )}\n      </div>\n      <div className=\"mb-4\">\n        <label\n          className=\"mb-1 block font-bold text-gray-700 text-sm uppercase\"\n          htmlFor=\"description\"\n        >\n          Description\n        </label>\n        <textarea\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\"\n          ref={textAreaRef}\n          id=\"description\"\n          placeholder=\"Description\"\n        />\n      </div>\n\n      <div className=\"flex justify-end\">\n        <button\n          className=\"bg-transparent hover:bg-blue-500 text-blue-700 px-2 py-1 uppercase text-xs font-bold hover:text-white border border-blue-500 hover:border-transparent rounded\"\n          onClick={onCreateTask}\n        >\n          Create\n        </button>\n\n        <button\n          className=\"bg-transparent hover:bg-blue-500 text-blue-700 px-2 py-1 uppercase text-xs font-bold ml-2 hover:text-white border border-blue-500 hover:border-transparent rounded\"\n          onClick={onCreateTaskAndActivate}\n        >\n          Create and activate\n        </button>\n      </div>\n    </>\n  );\n});\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Context from \"../context\";\n\nexport const EditTask: React.FC = observer(() => {\n  const state = useContext(Context);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [inputVal, setInputValue] = useState<string>(\"\");\n  const [textareaVal, setTextareaValue] = useState<string>(\"\");\n\n  const classesOfInput = [\n    \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n  ];\n\n  useEffect(() => {\n    setInputValue(state.selectedTask.title);\n    setTextareaValue(state.selectedTask.description);\n  }, [state.selectedTask]);\n\n  if (isError) {\n    classesOfInput.push(\"border-red-500\");\n  }\n\n  const changeInputHandler = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setInputValue(event.target.value);\n    },\n    []\n  );\n\n  const changeTextareaHandler = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setTextareaValue(event.target.value);\n    },\n    []\n  );\n\n  const onUpdateTask = useCallback(() => {\n    if (inputVal.trim()) {\n      state.selectedTask.title = inputVal;\n      state.selectedTask.description = textareaVal;\n      state.updateTask(state.selectedTask);\n    } else {\n      setIsError(true);\n    }\n  }, [inputVal, state, textareaVal]);\n\n  return (\n    <>\n      <div className=\"mb-6 relative\">\n        <label\n          className=\"mb-1 block font-bold text-gray-700 text-sm uppercase\"\n          htmlFor=\"title\"\n        >\n          Title\n        </label>\n        <input\n          className={classesOfInput.join(\" \")}\n          onChange={changeInputHandler}\n          id=\"title\"\n          type=\"text\"\n          value={inputVal}\n          placeholder=\"Title\"\n        />\n        {isError && (\n          <p className=\"-mb-5 absolute bottom-0 italic left-0 text-red-500 text-xs\">\n            This field is required.\n          </p>\n        )}\n      </div>\n      <div className=\"mb-4\">\n        <label\n          className=\"mb-1 block font-bold text-gray-700 text-sm uppercase\"\n          htmlFor=\"description\"\n        >\n          Description\n        </label>\n        <textarea\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\"\n          value={textareaVal}\n          onChange={changeTextareaHandler}\n          id=\"description\"\n          placeholder=\"Description\"\n        />\n      </div>\n\n      <div className=\"flex justify-end\">\n        <button\n          className=\"bg-transparent hover:bg-blue-500 text-blue-700 px-2 py-1 uppercase text-xs font-bold hover:text-white border border-blue-500 hover:border-transparent rounded\"\n          onClick={onUpdateTask}\n        >\n          Update\n        </button>\n      </div>\n    </>\n  );\n});\n","import React, { useContext, useCallback } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Context from \"../context\";\n\nexport const Report: React.FC = observer(() => {\n  const state = useContext(Context);\n\n  const getTotalTime = useCallback(() => {\n    let totalTime = 0;\n    state.tasksWithTime.forEach((t) => {\n      totalTime += state.getTimeAsSecondsFromTask(t);\n    });\n    return state.getTimeAsString(totalTime);\n  }, [state]);\n\n  return (\n    <div>\n      {state.tasksWithTime &&\n        state.tasksWithTime.map((task) => (\n          <div key={task.id} className=\"mt-2 flex justify-between items-start\">\n            <div className=\"flex-1\">\n              <h2 className=\"font-medium text-md\">{task.title}</h2>\n              <p className=\"text-gray-700 text-sm\">{task.description}</p>\n            </div>\n\n            <div className=\"flex flex-col items-end ml-2\">\n              {task.isRunning && (\n                <div className=\"bg-teal-500 border border-teal-600 mb-1 px-2 rounded-full text-white text-xs\">\n                  Running\n                </div>\n              )}\n\n              <div className=\"font-medium text-gray-700 text-xs\">\n                {state.getSpendTime(task)}\n              </div>\n            </div>\n          </div>\n        ))}\n\n      <div className=\"flex justify-between mt-4\">\n        <h4 className=\"font-bold text-sm uppercase\">Total time:</h4>\n        <p className=\"font-semibold text-gray-700 text-sm\">{getTotalTime()}</p>\n      </div>\n    </div>\n  );\n});\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Context from \"../context\";\n\nexport const Confirmation: React.FC = observer(() => {\n  const state = useContext(Context);\n\n  return (\n    <>\n      <p className=\"text-gray-700 text-sm font-medium\">\n        Are you sure that you want to delete task?\n      </p>\n\n      <div className=\"flex justify-end mt-6\">\n        <button\n          className=\"w-20 bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-1 px-2 border border-blue-500 hover:border-transparent rounded\"\n          onClick={state.closeHandler}\n        >\n          No\n        </button>\n        <button\n          className=\"ml-2 w-20 bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded\"\n          onClick={() => state.deleteTask(state.selectedTask.id)}\n        >\n          Yes\n        </button>\n      </div>\n    </>\n  );\n});\n","import React, { useContext, useCallback } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { CreateTask } from \"./CreateTask\";\nimport { EditTask } from \"./EditTask\";\nimport { Report } from \"./Report\";\nimport Context from \"../context\";\nimport { Confirmation } from \"./Confirmation\";\n\nexport const Modal: React.FC = observer(() => {\n  const state = useContext(Context);\n  const titleOfModal =\n    state.kindOfModal === \"create\"\n      ? \"Create a task\"\n      : state.kindOfModal === \"edit\"\n      ? \"Edit a task\"\n      : state.kindOfModal === \"report\"\n      ? \"Report\"\n      : \"Confirmation\";\n\n  const clickHandler = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (e.target === e.currentTarget) {\n        state.closeHandler();\n      }\n    },\n    [state]\n  );\n\n  return (\n    <div\n      className=\"fixed top-0 left-0 right-0 bottom-0 z-50 p-6 flex justify-center items-center bg-black bg-opacity-75\"\n      onClick={clickHandler}\n    >\n      <div className=\"bg-white max-w-sm p-6 rounded shadow-xl w-full relative z-10\">\n        <div className=\"flex justify-between mb-2\">\n          <h2 className=\"uppercase text-gray-700 font-bold text-md\">\n            {titleOfModal}\n          </h2>\n\n          <button\n            className=\"cursor-pointer text-gray-700 hover:text-gray-900 transition ease-in-out duration-300\"\n            onClick={state.closeHandler}\n          >\n            <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"x w-6 h-6\">\n              <path\n                fillRule=\"evenodd\"\n                d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                clipRule=\"evenodd\"\n              ></path>\n            </svg>\n          </button>\n        </div>\n\n        <div className=\"py-2\">\n          {state.kindOfModal === \"create\" && <CreateTask />}\n          {state.kindOfModal === \"edit\" && <EditTask />}\n          {state.kindOfModal === \"report\" && <Report />}\n          {state.kindOfModal === \"confirmation\" && <Confirmation />}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport { ActiveTasks } from \"./components/ActiveTasks/ActiveTasks\";\nimport { TasksList } from \"./components/TasksList/TasksList\";\nimport { Modal } from \"./components/Modal\";\n\nimport Context, { useApplicationService } from \"./context\";\n\nconst App: React.FC = observer(() => {\n  const state = useApplicationService();\n\n  return (\n    <Context.Provider value={state}>\n      <div className=\"main-wrapper\">\n        <div className=\"header fixed top-0 left-0 right-0 z-10 bg-white flex-wrap py-4 px-6 border-b border-gray-300 shadow-sm flex justify-between items-center w-full\">\n          <h1 className=\"font-bold text-gray-800 text-md uppercase\">\n            Tasks management\n          </h1>\n\n          <div className=\"header__action-bar flex items-center\">\n            <button\n              className=\"bg-transparent hover:bg-blue-500 text-blue-700 px-2 py-1 uppercase text-xs font-bold ml-2 hover:text-white border border-blue-500 hover:border-transparent rounded\"\n              onClick={state.showCreateTaskModal}\n            >\n              Create a task\n            </button>\n            <button\n              className=\"bg-transparent hover:bg-blue-500 text-blue-700 px-2 py-1 uppercase text-xs font-bold ml-2 hover:text-white border border-blue-500 hover:border-transparent rounded\"\n              onClick={state.showReportModal}\n            >\n              Report\n            </button>\n          </div>\n        </div>\n\n        <div className=\"list-wrapper mx-auto max-w-sm md:max-w-lg py-4 px-6\">\n          <ActiveTasks />\n          <TasksList />\n        </div>\n\n        {state.kindOfModal && <Modal />}\n\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={true}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n\n        <div className=\"py-4 px-6\">\n          <p className=\"text-center text-gray-500 text-xs\">\n            &copy;2020 Anton Ferkalek. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </Context.Provider>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.generated.css\";\nimport \"./styles/main.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}